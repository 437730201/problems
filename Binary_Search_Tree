# -*- coding: utf-8 -*-
# @TIME     : 2018/12/24 上午 09:33
# @Author   : Marst
"""
二叉查找树（Binary Search Tree）,
    又称为二叉搜索树、二叉排序树。其或者是一棵空树；或者是具有以下性质的二叉树：

若左子树不空，则左子树上所有结点的值均小于或等于它的根结点的值
若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值
左、右子树也分别为二叉排序树

                     5
                    / \
                   2   7
                  / \   \
                 1   3   9

"""

class Node():

    def __init__(self,data):
        self.data = data
        self.lchild = None
        self.rchild = None

class bs_tree():

    def __init__(self,node_list):
        self.root = Node(node_list[0])
        self.wid = len(node_list)
        self.start_func(node_list)

    def start_func(self,node_list):
        for data in node_list[1:]:
            self.insert(data)

    def search(self,node,parent,data):
        """

        :param node:
        :param parent:
        :param data:
        :return:
        """

        if node is None:
            return False,node,parent

        if node.data == data:
            return True,node,parent
        # 向下查询 左小 右大
        # 小于 左边  往下查询
        if node.data > data:
            return self.search(node.lchild,node,data)
        else:
            return self.search(node.rchild,node,data)

    def insert(self,data):
        flag,n,p  = self.search(self.root, self.root,data)
        # print(flag,n,p)
        if not flag:
            new_node = Node(data)
            if data > p.data:
                p.rchild = new_node
            else:
                p.lchild = new_node
            # print('*'*50)

    def delete(self,root,data):
        flag, n, p = self.search(root, root, data)

        if flag is False:
            print('No find target data.')
        else:
            if n.lchild is None:
                if n == p.lchild:
                    p.lchild = n.lchild
                else:
                    p.rchild = n.rchild
                del p
            elif n.rchild is None:
                if n == p.lchild:
                    p.lchild = n.lchild
                else:
                    p.rchild = n.rchild
                del p
            else:
                pre = n.rchild
                if pre.lchild is None:
                    n.data = pre.data
                    n.rchild = pre.rchild
                    del pre
                else:
                    next = pre.lchild
                    while next.lchild is not None:
                        pre = next
                        next = next.lchild
                    n.data = next.data
                    pre.lchild = next.lchild
                    del p

    def show_pre_order(self,node , depth = 0):

        if node is not None:
            print("|      "*depth + "+--" ,node.data)
            self.show_pre_order(node.lchild , depth + 1)
            self.show_pre_order(node.rchild , depth + 1)
        else:
            print("|      " * depth + "+--", ' ? ')


    def show_mid_order(self,node,depth = 0):
        if node is not None:
            self.show_mid_order(node.lchild,depth +1)
            print("|      " * depth + "+--", node.data)
            self.show_mid_order(node.rchild,depth+1)
        else:
            print("|      " * depth + "+--", ' ? ')

    def show_post_order(self,node,depth = 0):
        if node is not None:
            self.show_post_order(node.lchild,depth+1)
            self.show_post_order(node.rchild,depth+1)
            print("|      " * depth + "+--", node.data)
        else:
            print("|      " * depth + "+--", ' ? ')

    def show_length(self,node):

        llength = 0
        while node.lchild != None:
            llength += 1
            node = node.lchild

        rlength = 0
        while node.rchild != None:
            rlength += 1
            node = node.rchild
        self.llen = llength
        self.rlen = rlength
        return max([llength,rlength])

if __name__ == '__main__':
    a = [49, 38, 65, 97, 60, 76, 13, 27, 5, 1]
    # a = [4,6,8,10,12,14,16]
    # b = sorted(a,reverse=True)
    a = [5,7,6,9,11,10,8]

    bst = bs_tree(a)
    # bst.delete(bst.root,13)
    # bst.show_pre_order(bst.root)
    bst.show_post_order(bst.root)
    # bst.show_mid_order(bst.root)
